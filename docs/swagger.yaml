basePath: /
definitions:
  models.User:
    properties:
      created_at:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
  description: A simple REST API for user authentication with Go and MySQL
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go REST API
  version: "1.0"
paths:
  /api/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout a user (client-side token discard)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout a user
      tags:
      - auth
  /api/auth/profile:
    get:
      consumes:
      - application/json
      description: Retrieve the profile of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
    post:
      consumes:
      - application/json
      description: Update username and/or password of the authenticated user
      parameters:
      - description: Profile update details
        in: body
        name: profile
        required: true
        schema:
          properties:
            current_password:
              type: string
            new_password:
              type: string
            new_username:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - auth
  /api/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          properties:
            password:
              type: string
            username:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              token:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Login a user
      tags:
      - auth
  /api/register:
    post:
      consumes:
      - application/json
      description: Register a new user with a username and password
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          properties:
            password:
              type: string
            username:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Register a new user
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
